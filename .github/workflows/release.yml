name: Release

on:
  pull_request:
  push:
    tags:
      - '*'
      - '**'

    branches:
      - main
      - release/*

permissions:
  contents: write

jobs:
  #  FIXME: disabled cuz u need to delete the release that was created on the tag for overwriting
  genr-tags-branch:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.ref, 'refs/heads/release/')

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 3

      - name: For Branches
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          BRANCH_NAME=${BRANCH_NAME//\//-}
          git tag "$BRANCH_NAME" -f
          git push --tags -f

  genr-tags-pr:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: For PRs
        if: github.event_name == 'pull_request'
        run: |
          PR_NUMBER=$(echo "$GITHUB_REF" | awk -F / '{print $3}')
          PR_TAG="$PR_NUMBER-pr"
          git tag "$PR_TAG" -f
          git push --tags -f

  goreleaser:
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-tags: true
          ref: ${{ github.event.ref }}

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: go.mod
          check-latest: true
      
      #      - name: PreRelease
      #        if: github.event_name == 'pull_request'
      #        run: |
      #          #pull_number=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
      #          PR_NUMBER=$(echo "$GITHUB_REF" | awk -F / '{print $3}')
      #          PR_TAG="$PR_NUMBER-pr"
      #          git tag "$PR_TAG" -f
      #          export VERSION=$(git describe --tags --abbrev=0)-$PR_TAG
      #          export COMMIT_SHA=$(git rev-parse HEAD)

      - name: Get Tag
        run: echo "TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Set Tag output
        id: vars
        run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

      - name: Check if valid version
        id: check-valid
        run: |
          if [[ "${{ steps.vars.outputs.tag }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            export RELEASE_MODE=latest
          else
            export RELEASE_MODE=nightly #TODO: look if gorelease supports canary
          fi
          
          echo "Release Mode is $RELEASE_MODE"
          echo "RELEASE_MODE=$RELEASE_MODE" >> $GITHUB_OUTPUT  

      - uses: nowsprinting/check-version-format-action@v3
        id: version
        with:
          prefix: 'v'

      - name: Version tag only step
        run: |
          echo "Found valid version format in tag!"
          echo "Full version: ${{ steps.version.outputs.full }}"
          echo "Major version: ${{ steps.version.outputs.major }}"
          echo "Major with pre-release: ${{ steps.version.outputs.major_prerelease }}"
        if: steps.version.outputs.is_valid == 'true'

      - name: Stable version only step
        run: |
          echo "Found stable version in tag!"
        if: steps.version.outputs.is_stable == 'true'

      - name: Run GoReleaser
        continue-on-error: true
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          install-only: false


          args: release --clean

        #          workdir:
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload assets
        uses: actions/upload-artifact@v3
        with:
          name: hive
          path: ./dist/*
